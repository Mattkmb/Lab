:- encoding(utf8).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Определения для проверки истинности предположений:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Предположение S1: если A = true, то B и C должны = true.
eval_s1(A, B, C, true) :-
    (A == true -> (B == true, C == true) ; true).
eval_s1(A, B, C, false) :-
    A == true,
    (B \== true ; C \== true).

% Предположение S2: A и C получат максимальную прибыль одновременно (A = C).
eval_s2(A, C, true) :- A == C.
eval_s2(A, C, false) :- A \== C.

% Предположение S3: если C = true, то B должен быть true.
eval_s3(B, C, true) :-
    (C == true -> B == true ; true).
eval_s3(B, C, false) :-
    C == true, B \== true.

% Помощник для подсчёта: true -> 0, false -> 1.
bool_val(true, 0).
bool_val(false, 1).

count_falses(V1, V2, V3, Count) :-
    bool_val(V1, X1),
    bool_val(V2, X2),
    bool_val(V3, X3),
    Count is X1 + X2 + X3.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Поиск решения задачи (ровно одно предположение ложно):
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

solve_logic(A, B, C) :-
    % Перебираем все варианты для A, B, C (true - получило прибыль, false - не получило)
    member(A, [true, false]),
    member(B, [true, false]),
    member(C, [true, false]),
    eval_s1(A, B, C, V1),
    eval_s2(A, C, V2),
    eval_s3(B, C, V3),
    count_falses(V1, V2, V3, 1).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Интерфейс:
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

main :-
    nl,
    write('Программа для решения логической задачи подразделений торговой фирмы.'), nl, nl,
    write('Условие задачи:'), nl,
    write('1) А получит максимальную прибыль только тогда, когда получат максимальную прибыль В и С.'), nl,
    write('2) Либо А и С получат максимальную прибыль одновременно, либо одновременно не получат.'), nl,
    write('3) Для того, чтобы подразделение С получило максимальную прибыль, необходимо, чтобы и В получило максимальную прибыль.'), nl,
    write('При этом, ровно одно из этих предположений оказалось ложным, а два – истинными.'), nl, nl,
    ( solve_logic(A, B, C) ->
         format('Решение задачи:~n'),
         format('Подразделение A получает максимальную прибыль: ~w~n', [A]),
         format('Подразделение B получает максимальную прибыль: ~w~n', [B]),
         format('Подразделение C получает максимальную прибыль: ~w~n', [C])
    ;
         write('Решение не найдено.')
    ),
    nl,
    write('Хотите решить задачу ещё раз? (да/нет): '),
    read(Answer),
    ( Answer == да ->
         nl, main
    ;
         write('До свидания!'), nl, halt
    ).

:- initialization(main).